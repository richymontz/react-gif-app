{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","c","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAWA,OACI,sBAAMC,SARW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,QAAU,GAC5BR,GAAc,SAACS,GAAD,OAAQP,GAAR,mBAAuBO,OAEzCN,EAAc,KAGd,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAfc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,4DACJ,mCACTC,EAFa,iDAEoCC,UAAUH,GAF9C,6BACJ,oCADI,SAGII,MAAMF,GAHV,cAGbG,EAHa,gBAIIA,EAASC,OAJb,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACrC,OACI,sBAAKc,UAAU,yCAAf,UACG,qBAAgBC,IAAMf,EAAMgB,IAAMN,GAAvBD,GACX,kCAAMC,SCDJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SACtB,ECHwB,SAAEA,GAC1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAEGqB,EDb0BK,CAAa1B,GAAjCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACI,qCACI,6BAAMpB,IAEJoB,GAAW,mBAAGJ,UAAU,oCAAb,uBAEb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAESA,GADCA,EAAIC,aEbzBgB,EAAe,WACxB,MAAoCzC,mBAAS,CAAC,eAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEQ2C,EAAWnB,KAAI,SAACT,GAAD,OACX,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCZlC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6f0ec5a7.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n    const [inputValue, setinputValue] = useState('');\n    const handleInputChange = (e) => {\n        setinputValue(e.target.value);\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length >= 2) {\n            setCategories((c) => [inputValue, ...c]);\n        }\n        setinputValue('');\n    }\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","export const getGifs = async ( category ) => {\n    const apiKey = 'hJlkeTxUrdrGKknG3USyKWX1FU5Rrq3h';\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=${ apiKey }`;\n    const response = await fetch(url);\n    const { data } = await response.json();\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}\n\n//returns a promise","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n           <img key={ id } src={ url } alt={ title } />\n           <p> { title }</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n// import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n    const { data:images, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3>{ category }</h3>\n\n            { loading && <p className=\"animate__animated animate__bounce\"> Loading </p> }\n\n            <div className=\"card-grid\">\n                {\n                    images.map(img => ( \n                        <GifGridItem \n                            key={ img.id }\n                            { ...img }\n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect(() => {\n        getGifs(category)\n            .then(imgs => {\n                setstate({\n                    data: imgs,\n                    loading: false\n                })\n            });\n    }, [category])\n    \n    return state;\n}\n","// Used sniped rafc\nimport React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n    const [categories, setCategories] = useState(['Bodycombat']);\n\n    return (\n        <>\n            <h1>Gif Expert App</h1>\n            <AddCategory setCategories={ setCategories }/>\n            <hr/>\n            <ol>\n                { \n                    categories.map((category) => (\n                        <GifGrid \n                            key={ category } \n                            category={ category }\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}